// Generated by view binder compiler. Do not edit!
package com.lifesolutions.bd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.lifesolutions.bd.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityVideoCallScreenBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout buttonSectionVideoCalling;

  @NonNull
  public final LinearLayout callDetailsSectionVideoCallScreen;

  @NonNull
  public final TextView callDuration;

  @NonNull
  public final TextView callStateVideo;

  @NonNull
  public final ImageButton declineVideoCallScreen;

  @NonNull
  public final RelativeLayout localVideo;

  @NonNull
  public final ImageButton loudVideoCallScreen;

  @NonNull
  public final ImageButton muteVideoCallScreen;

  @NonNull
  public final TextView nameVideoCallScreen;

  @NonNull
  public final CircleImageView profileImageVideoCallScreen;

  @NonNull
  public final TextView remoteUser;

  @NonNull
  public final LinearLayout remoteVideo;

  @NonNull
  public final LinearLayout userDetailsLayoutVideoCallScreen;

  private ActivityVideoCallScreenBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout buttonSectionVideoCalling,
      @NonNull LinearLayout callDetailsSectionVideoCallScreen, @NonNull TextView callDuration,
      @NonNull TextView callStateVideo, @NonNull ImageButton declineVideoCallScreen,
      @NonNull RelativeLayout localVideo, @NonNull ImageButton loudVideoCallScreen,
      @NonNull ImageButton muteVideoCallScreen, @NonNull TextView nameVideoCallScreen,
      @NonNull CircleImageView profileImageVideoCallScreen, @NonNull TextView remoteUser,
      @NonNull LinearLayout remoteVideo, @NonNull LinearLayout userDetailsLayoutVideoCallScreen) {
    this.rootView = rootView;
    this.buttonSectionVideoCalling = buttonSectionVideoCalling;
    this.callDetailsSectionVideoCallScreen = callDetailsSectionVideoCallScreen;
    this.callDuration = callDuration;
    this.callStateVideo = callStateVideo;
    this.declineVideoCallScreen = declineVideoCallScreen;
    this.localVideo = localVideo;
    this.loudVideoCallScreen = loudVideoCallScreen;
    this.muteVideoCallScreen = muteVideoCallScreen;
    this.nameVideoCallScreen = nameVideoCallScreen;
    this.profileImageVideoCallScreen = profileImageVideoCallScreen;
    this.remoteUser = remoteUser;
    this.remoteVideo = remoteVideo;
    this.userDetailsLayoutVideoCallScreen = userDetailsLayoutVideoCallScreen;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityVideoCallScreenBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityVideoCallScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_video_call_screen, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityVideoCallScreenBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_section_video_calling;
      LinearLayout buttonSectionVideoCalling = ViewBindings.findChildViewById(rootView, id);
      if (buttonSectionVideoCalling == null) {
        break missingId;
      }

      id = R.id.call_details_section_video_call_screen;
      LinearLayout callDetailsSectionVideoCallScreen = ViewBindings.findChildViewById(rootView, id);
      if (callDetailsSectionVideoCallScreen == null) {
        break missingId;
      }

      id = R.id.callDuration;
      TextView callDuration = ViewBindings.findChildViewById(rootView, id);
      if (callDuration == null) {
        break missingId;
      }

      id = R.id.callState_video;
      TextView callStateVideo = ViewBindings.findChildViewById(rootView, id);
      if (callStateVideo == null) {
        break missingId;
      }

      id = R.id.decline_video_call_screen;
      ImageButton declineVideoCallScreen = ViewBindings.findChildViewById(rootView, id);
      if (declineVideoCallScreen == null) {
        break missingId;
      }

      id = R.id.localVideo;
      RelativeLayout localVideo = ViewBindings.findChildViewById(rootView, id);
      if (localVideo == null) {
        break missingId;
      }

      id = R.id.loud_video_call_screen;
      ImageButton loudVideoCallScreen = ViewBindings.findChildViewById(rootView, id);
      if (loudVideoCallScreen == null) {
        break missingId;
      }

      id = R.id.mute_video_call_screen;
      ImageButton muteVideoCallScreen = ViewBindings.findChildViewById(rootView, id);
      if (muteVideoCallScreen == null) {
        break missingId;
      }

      id = R.id.name_video_call_screen;
      TextView nameVideoCallScreen = ViewBindings.findChildViewById(rootView, id);
      if (nameVideoCallScreen == null) {
        break missingId;
      }

      id = R.id.profile_image_video_call_screen;
      CircleImageView profileImageVideoCallScreen = ViewBindings.findChildViewById(rootView, id);
      if (profileImageVideoCallScreen == null) {
        break missingId;
      }

      id = R.id.remoteUser;
      TextView remoteUser = ViewBindings.findChildViewById(rootView, id);
      if (remoteUser == null) {
        break missingId;
      }

      id = R.id.remoteVideo;
      LinearLayout remoteVideo = ViewBindings.findChildViewById(rootView, id);
      if (remoteVideo == null) {
        break missingId;
      }

      id = R.id.user_details_layout_video_call_screen;
      LinearLayout userDetailsLayoutVideoCallScreen = ViewBindings.findChildViewById(rootView, id);
      if (userDetailsLayoutVideoCallScreen == null) {
        break missingId;
      }

      return new ActivityVideoCallScreenBinding((RelativeLayout) rootView,
          buttonSectionVideoCalling, callDetailsSectionVideoCallScreen, callDuration,
          callStateVideo, declineVideoCallScreen, localVideo, loudVideoCallScreen,
          muteVideoCallScreen, nameVideoCallScreen, profileImageVideoCallScreen, remoteUser,
          remoteVideo, userDetailsLayoutVideoCallScreen);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
