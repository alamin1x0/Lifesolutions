// Generated by view binder compiler. Do not edit!
package com.lifesolutions.bd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.lifesolutions.bd.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class NotificationLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MaterialButton btnAcceptNotificationItem;

  @NonNull
  public final MaterialButton btnDeleteNotificationItem;

  @NonNull
  public final LinearLayout detailsFieldNotification;

  @NonNull
  public final CircleImageView imageNotification;

  @NonNull
  public final RelativeLayout itemNotification;

  @NonNull
  public final TextView messageNotification;

  @NonNull
  public final ImageView moreButtonNotification;

  @NonNull
  public final TextView nameNotification;

  @NonNull
  public final TextView notificationDateTime;

  @NonNull
  public final LinearLayout requestAcceptAction;

  private NotificationLayoutBinding(@NonNull RelativeLayout rootView,
      @NonNull MaterialButton btnAcceptNotificationItem,
      @NonNull MaterialButton btnDeleteNotificationItem,
      @NonNull LinearLayout detailsFieldNotification, @NonNull CircleImageView imageNotification,
      @NonNull RelativeLayout itemNotification, @NonNull TextView messageNotification,
      @NonNull ImageView moreButtonNotification, @NonNull TextView nameNotification,
      @NonNull TextView notificationDateTime, @NonNull LinearLayout requestAcceptAction) {
    this.rootView = rootView;
    this.btnAcceptNotificationItem = btnAcceptNotificationItem;
    this.btnDeleteNotificationItem = btnDeleteNotificationItem;
    this.detailsFieldNotification = detailsFieldNotification;
    this.imageNotification = imageNotification;
    this.itemNotification = itemNotification;
    this.messageNotification = messageNotification;
    this.moreButtonNotification = moreButtonNotification;
    this.nameNotification = nameNotification;
    this.notificationDateTime = notificationDateTime;
    this.requestAcceptAction = requestAcceptAction;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NotificationLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NotificationLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.notification_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NotificationLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_accept_notification_item;
      MaterialButton btnAcceptNotificationItem = ViewBindings.findChildViewById(rootView, id);
      if (btnAcceptNotificationItem == null) {
        break missingId;
      }

      id = R.id.btn_delete_notification_item;
      MaterialButton btnDeleteNotificationItem = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteNotificationItem == null) {
        break missingId;
      }

      id = R.id.details_field_notification;
      LinearLayout detailsFieldNotification = ViewBindings.findChildViewById(rootView, id);
      if (detailsFieldNotification == null) {
        break missingId;
      }

      id = R.id.image_notification;
      CircleImageView imageNotification = ViewBindings.findChildViewById(rootView, id);
      if (imageNotification == null) {
        break missingId;
      }

      RelativeLayout itemNotification = (RelativeLayout) rootView;

      id = R.id.message_notification;
      TextView messageNotification = ViewBindings.findChildViewById(rootView, id);
      if (messageNotification == null) {
        break missingId;
      }

      id = R.id.more_button_notification;
      ImageView moreButtonNotification = ViewBindings.findChildViewById(rootView, id);
      if (moreButtonNotification == null) {
        break missingId;
      }

      id = R.id.name_notification;
      TextView nameNotification = ViewBindings.findChildViewById(rootView, id);
      if (nameNotification == null) {
        break missingId;
      }

      id = R.id.notification_date_time;
      TextView notificationDateTime = ViewBindings.findChildViewById(rootView, id);
      if (notificationDateTime == null) {
        break missingId;
      }

      id = R.id.request_accept_action;
      LinearLayout requestAcceptAction = ViewBindings.findChildViewById(rootView, id);
      if (requestAcceptAction == null) {
        break missingId;
      }

      return new NotificationLayoutBinding((RelativeLayout) rootView, btnAcceptNotificationItem,
          btnDeleteNotificationItem, detailsFieldNotification, imageNotification, itemNotification,
          messageNotification, moreButtonNotification, nameNotification, notificationDateTime,
          requestAcceptAction);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
